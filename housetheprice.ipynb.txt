{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2023-04-01T06:36:46.339713Z","iopub.execute_input":"2023-04-01T06:36:46.340143Z","iopub.status.idle":"2023-04-01T06:36:46.359425Z","shell.execute_reply.started":"2023-04-01T06:36:46.340109Z","shell.execute_reply":"2023-04-01T06:36:46.357930Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"/kaggle/input/iowa-house-prices/train.csv\n/kaggle/input/iowa-house-prices/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"d = pd.read_csv(\"/kaggle/input/iowa-house-prices/train.csv\")\nd_frame=pd.DataFrame(d)\n","metadata":{"execution":{"iopub.status.busy":"2023-04-01T06:36:46.366949Z","iopub.execute_input":"2023-04-01T06:36:46.367570Z","iopub.status.idle":"2023-04-01T06:36:46.393028Z","shell.execute_reply.started":"2023-04-01T06:36:46.367533Z","shell.execute_reply":"2023-04-01T06:36:46.392122Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"d_frame.columns  \n#d_frame.head","metadata":{"execution":{"iopub.status.busy":"2023-04-01T06:36:46.394883Z","iopub.execute_input":"2023-04-01T06:36:46.395502Z","iopub.status.idle":"2023-04-01T06:36:46.402083Z","shell.execute_reply.started":"2023-04-01T06:36:46.395465Z","shell.execute_reply":"2023-04-01T06:36:46.401264Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition', 'SalePrice'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeRegressor as reg\nimport joblib\nli=['LotArea','OverallCond','YrSold']\nx=d_frame[li]\nprint(x)\nY=d_frame.SalePrice","metadata":{"execution":{"iopub.status.busy":"2023-04-01T06:36:46.403494Z","iopub.execute_input":"2023-04-01T06:36:46.404064Z","iopub.status.idle":"2023-04-01T06:36:46.422550Z","shell.execute_reply.started":"2023-04-01T06:36:46.404030Z","shell.execute_reply":"2023-04-01T06:36:46.421161Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"      LotArea  OverallCond  YrSold\n0        8450            5    2008\n1        9600            8    2007\n2       11250            5    2008\n3        9550            5    2006\n4       14260            5    2008\n...       ...          ...     ...\n1455     7917            5    2007\n1456    13175            6    2010\n1457     9042            9    2010\n1458     9717            6    2010\n1459     9937            6    2008\n\n[1460 rows x 3 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"p_model=reg()\np_model.fit(x,Y)\nrdi=p_model.predict(x)\nrdi_d=pd.DataFrame(rdi)\nrdi_d.to_csv('mypred_train.csv')\nprint(rdi_d)\n\n","metadata":{"execution":{"iopub.status.busy":"2023-04-01T06:36:46.425213Z","iopub.execute_input":"2023-04-01T06:36:46.425944Z","iopub.status.idle":"2023-04-01T06:36:46.452733Z","shell.execute_reply.started":"2023-04-01T06:36:46.425900Z","shell.execute_reply":"2023-04-01T06:36:46.451500Z"},"trusted":true},"execution_count":34,"outputs":[{"name":"stdout","text":"             0\n0     209250.0\n1     153250.0\n2     239700.0\n3     140000.0\n4     250000.0\n...        ...\n1455  175000.0\n1456  210000.0\n1457  266500.0\n1458  142125.0\n1459  147500.0\n\n[1460 rows x 1 columns]\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt \n\nplt.scatter(rdi,Y)","metadata":{"execution":{"iopub.status.busy":"2023-04-01T06:36:46.454300Z","iopub.execute_input":"2023-04-01T06:36:46.454704Z","iopub.status.idle":"2023-04-01T06:36:46.714124Z","shell.execute_reply.started":"2023-04-01T06:36:46.454671Z","shell.execute_reply":"2023-04-01T06:36:46.713030Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"<matplotlib.collections.PathCollection at 0x7f98ccc54b50>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"d_test = pd.read_csv(\"/kaggle/input/iowa-house-prices/test.csv\")\nd_frame_test=pd.DataFrame(d_test)\n#d.head\n#d.describe\nd_test.columns\n#d_frame.SalePrice false\n","metadata":{"execution":{"iopub.status.busy":"2023-04-01T06:36:46.717379Z","iopub.execute_input":"2023-04-01T06:36:46.717950Z","iopub.status.idle":"2023-04-01T06:36:46.749643Z","shell.execute_reply.started":"2023-04-01T06:36:46.717899Z","shell.execute_reply":"2023-04-01T06:36:46.748181Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"li_test=['LotArea','OverallCond','YrSold']\nx_test=d_frame_test[li_test]\n\n","metadata":{"execution":{"iopub.status.busy":"2023-04-01T06:36:46.751563Z","iopub.execute_input":"2023-04-01T06:36:46.752252Z","iopub.status.idle":"2023-04-01T06:36:46.760966Z","shell.execute_reply.started":"2023-04-01T06:36:46.752210Z","shell.execute_reply":"2023-04-01T06:36:46.759264Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"t_res=p_model.predict(x_test)\nprint(t_res)\nt_frame=pd.DataFrame(t_res)\nt_frame.to_csv('test_pred.csv')\n","metadata":{"execution":{"iopub.status.busy":"2023-04-01T06:36:46.763090Z","iopub.execute_input":"2023-04-01T06:36:46.765128Z","iopub.status.idle":"2023-04-01T06:36:46.780470Z","shell.execute_reply.started":"2023-04-01T06:36:46.765071Z","shell.execute_reply":"2023-04-01T06:36:46.778815Z"},"trusted":true},"execution_count":38,"outputs":[{"name":"stdout","text":"[197000. 190000. 140000. ... 274970. 239900. 140000.]\n","output_type":"stream"}]},{"cell_type":"code","source":"def inputter(lot,overalc,yrsol) :\n    i=np.array([[lot,overalc,yrsol]])\n    fin=p_model.predict(i)\n    print(\"your house price $ \",fin)\n    ","metadata":{"execution":{"iopub.status.busy":"2023-04-01T07:15:35.002311Z","iopub.execute_input":"2023-04-01T07:15:35.002759Z","iopub.status.idle":"2023-04-01T07:15:35.009510Z","shell.execute_reply.started":"2023-04-01T07:15:35.002727Z","shell.execute_reply":"2023-04-01T07:15:35.008352Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"a=int(input(\"enter lot area : \"))\nb=int(input(\"enter the overall condition of the plot : \" ))\nc=int(input(\"enter the year sold or finished :  \" ))\ninputter(a,b,c)","metadata":{"execution":{"iopub.status.busy":"2023-04-01T07:15:45.924190Z","iopub.execute_input":"2023-04-01T07:15:45.924632Z","iopub.status.idle":"2023-04-01T07:16:03.773545Z","shell.execute_reply.started":"2023-04-01T07:15:45.924586Z","shell.execute_reply":"2023-04-01T07:16:03.772311Z"},"trusted":true},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdin","text":"enter lot area :  2400\nenter the overall condition of the plot :  10\nenter the year sold or finished :   2022\n"},{"name":"stdout","text":"your house price $  [125000.]\n","output_type":"stream"},{"name":"stderr","text":"/opt/conda/lib/python3.7/site-packages/sklearn/base.py:451: UserWarning: X does not have valid feature names, but DecisionTreeRegressor was fitted with feature names\n  \"X does not have valid feature names, but\"\n","output_type":"stream"}]}]}